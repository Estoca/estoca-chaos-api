"""add created_by_id to groups

Revision ID: 74a88c6e8dea
Revises: 001
Create Date: 2025-03-28 21:22:49.198334

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '74a88c6e8dea'
down_revision = '001'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('urlparameter')
    op.drop_table('header')
    op.drop_table('endpoint')
    op.drop_table('group')

    op.create_table('groups',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at_epoch', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], name=op.f('fk_groups_created_by_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_groups'))
    )
    op.create_table('endpoints',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('max_wait_time', sa.Integer(), nullable=False),
    sa.Column('chaos_mode', sa.Boolean(), nullable=False),
    sa.Column('response_schema', sa.JSON(), nullable=True),
    sa.Column('response_status_code', sa.Integer(), nullable=False),
    sa.Column('response_body', sa.String(), nullable=True),
    sa.Column('group_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at_epoch', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name=op.f('fk_endpoints_group_id_groups')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_endpoints'))
    )
    op.create_table('headers',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('required', sa.Boolean(), nullable=False),
    sa.Column('default_response', sa.JSON(), nullable=True),
    sa.Column('default_status_code', sa.Integer(), nullable=False),
    sa.Column('endpoint_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at_epoch', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['endpoint_id'], ['endpoints.id'], name=op.f('fk_headers_endpoint_id_endpoints')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_headers'))
    )
    op.create_table('url_parameters',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('required', sa.Boolean(), nullable=False),
    sa.Column('default_response', sa.JSON(), nullable=True),
    sa.Column('default_status_code', sa.Integer(), nullable=False),
    sa.Column('endpoint_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at_epoch', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['endpoint_id'], ['endpoints.id'], name=op.f('fk_url_parameters_endpoint_id_endpoints')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_url_parameters'))
    )
    op.add_column('user', sa.Column('picture', sa.String(), nullable=True))
    op.drop_constraint('uq_user_email', 'user', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint('uq_user_email', 'user', ['email'])
    op.drop_column('user', 'picture')
    op.drop_table('url_parameters')
    op.drop_table('headers')
    op.drop_table('endpoints')
    op.drop_table('groups')
    op.create_table('endpoint',
    sa.Column('id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('group_id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('max_wait_time', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('chaos_mode', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('response_schema', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('response_status_code', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('response_body', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at_epoch', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], name='fk_endpoint_created_by_id_user'),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name='fk_endpoint_group_id_group'),
    sa.PrimaryKeyConstraint('id', name='pk_endpoint'),
    postgresql_ignore_search_path=False
    )
    op.create_table('group',
    sa.Column('id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at_epoch', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], name='fk_group_created_by_id_user'),
    sa.PrimaryKeyConstraint('id', name='pk_group'),
    postgresql_ignore_search_path=False
    )
    op.create_table('header',
    sa.Column('id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('endpoint_id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('required', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('default_response', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('default_status_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at_epoch', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['endpoint_id'], ['endpoint.id'], name='fk_header_endpoint_id_endpoint'),
    sa.PrimaryKeyConstraint('id', name='pk_header')
    )
    op.create_table('urlparameter',
    sa.Column('id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('endpoint_id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('required', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('default_response', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('default_status_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at_epoch', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['endpoint_id'], ['endpoint.id'], name='fk_urlparameter_endpoint_id_endpoint'),
    sa.PrimaryKeyConstraint('id', name='pk_urlparameter')
    )
    # ### end Alembic commands ### 