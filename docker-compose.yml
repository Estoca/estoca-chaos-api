version: '3.8'

services:
  nginx:
    build:
      context: .
      dockerfile: docker/nginx.Dockerfile
    ports:
      - "${PORT}:80"
    environment:
      - DOMAIN=${DOMAIN}
    depends_on:
      - frontend
      - backend

  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_SERVER}:5432/${POSTGRES_DB}
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - SECRET_KEY=${APP_SECRET:-'changeme-in-production'}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - OAUTH_REDIRECT_URL=http://${DOMAIN}:${PORT}/api/auth/callback/google
      - BACKEND_CORS_ORIGINS=["http://${DOMAIN}:${PORT}"]
      - BACKEND_PORT=${BACKEND_PORT:-8000}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./backend/alembic:/app/alembic
    command: >
      sh -c "
        while ! nc -z db 5432; do
          echo 'Waiting for database to be ready...'
          sleep 2
        done
        echo 'Database is ready!'
        PGPASSWORD=${POSTGRES_PASSWORD} psql -h db -U ${POSTGRES_USER} -d postgres -c 'CREATE DATABASE ${POSTGRES_DB};' || true
        poetry run alembic upgrade head &&
        poetry run uvicorn app.main:app --host 0.0.0.0 --reload"

  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://${DOMAIN}:${PORT}/api/v1
        - INTERNAL_API_URL=http://backend:${BACKEND_PORT:-8000}/api/v1
        - NEXTAUTH_URL=http://${DOMAIN}:${PORT}
    environment:
      - NEXT_PUBLIC_API_URL=http://${DOMAIN}:${PORT}/api/v1
      - INTERNAL_API_URL=http://backend:${BACKEND_PORT:-8000}/api/v1
      - NEXTAUTH_URL=http://${DOMAIN}:${PORT}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - PORT=3000
    depends_on:
      - backend

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: 